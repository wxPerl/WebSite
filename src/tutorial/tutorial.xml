<?xml version="1.0" ?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                      "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<book>
<bookinfo>
  <title>wxPerl tutorial</title>
  <author><firstname>Mattia</firstname><surname>Barbon</surname></author>
  <copyright><year>2000-2004</year><holder>Mattia Barbon</holder></copyright>
</bookinfo>

<?dbhtml filename="tutorial.html"?>

<chapter>
  <?dbhtml filename="tutorial1.html"?>

  <title>About this tutorial</title>

<para>
This tutorial is meant to be a basic guide; it tries to assume only a
no prior knowledge of <ulink
url="http://www.wxwidgets.org/">wxWidgets</ulink> API; for a detailed
API description you need to refer to <ulink
url="http://www.wxwidgets.org/manuals/2.4.2/wx.htm"> the
wxWidgets/wxPerl manual</ulink> (<ulink
url="http://wxperl.sourceforge.net/download.html#Documentation"
>downloadable copy</ulink>). The key thing you need to keep in mind
while browsing wxWidgets documentation is that, if a wxPerl class is
called, say, <classname>Wx::Frame</classname>, you should search for
<classname>wxFrame</classname> in wxWidgets documentation.
</para>

<para>
A reasonably good Perl knowledge is required. You need to understand
basic Perl syntax, the creation and use of modules, and how objects
work in Perl.
</para>

</chapter>

<chapter>
  <?dbhtml filename="tutorial2.html"?>
  <title>First steps with wxPerl</title>

<section>
  <title>Introduction</title>

This chapter will introduce the basic structure all wxPerl programs
share. Since this is the first step in wxPerl land, it will be very
simple: it just opens a window.
</section>

<section>
  <title>Program</title>

<!-- replace first #1 -->
<programlisting>
# load wxPerl main module
use Wx;
</programlisting>
<!-- end -->

<para>
  Every wxPerl program must create an application object:
  it manages global state
  and processes events (we shall see this later).
</para>

<!-- replace first #2 -->
<programlisting>
# every application must create an application object
package MyApp;

use base 'Wx::App';
</programlisting>
<!-- end -->

<para>
  When an application object is created, wxPerl calls the
  <methodname>OnInit</methodname> method
  which is used to initialize global application data and usually creates one
  or more frames.
</para>

<!-- replace first #3 -->
<programlisting>
# this method is called automatically when an application object is
# first constructed, all application-level initialization is done here
sub OnInit {
</programlisting>
<!-- end -->

<para>
  The thing ALL <methodname>OnInit</methodname> methods do is
  creating one or more top level windows. The only thing to be noted
  is that wxWidgets requires every window to have an ID which is
  an integer number assigned at window creation time. In wxPerl most of
  the time you don't care about the value of the ID, so you should
  pass -1 to the window constructor to let wxWidgets generate an unique ID
  for you.
</para>

<!-- replace first #4 -->
<programlisting>
    # create a new frame (a frame is a top level window)
    my $frame = Wx::Frame->new( undef,           # parent window
                                -1,              # ID -1 means any
                                'wxPerl rules',  # title
                                [-1, -1],         # default position
                                [250, 150],       # size
                               );
</programlisting>
<!-- end -->

<para>
  Top level windows are not automatically shown by wxWidgets,
  hence you need to do it yourself.
</para>

<!-- replace first #5 -->
<programlisting>
    # show the frame
    $frame->Show( 1 );
}
</programlisting>
<!-- end -->

<para>
  This usually is all the code you ever need in your
  <classname>main</classname> package. It creates a new
  application instance thus calling <methodname>OnInit</methodname>,
  and starts the main application loop, which is responsible for
  dispatching GUI events to windows. The loop will not terminate
  until there are top level windows.
</para>

<!-- replace first #6 -->
<programlisting>
package main;

# create the application object, this will call OnInit
my $app = MyApp->new;
# process GUI events from the application this function will not
# return until the last frame is closed
$app->MainLoop;
</programlisting>
<!-- end -->

<para>
  And finally here is how this looks on screen.
</para>

<mediaobject>
  <imageobject>
    <imagedata align="center" fileref="images/first.win2k.png" format="PNG"/>
  </imageobject>
  <caption>
    <para>
(Windows 2000)
    </para>
  </caption>
</mediaobject>

<para>
  <ulink url="first.pl.txt">Here</ulink> you can see the program at a glance
  (it is suffixed .pl.txt so your browser will not try to execute it, 
   but from Perl's point of view this makes no difference).
</para>

</section>

</chapter>

<chapter>
  <?dbhtml filename="tutorial3.html"?>
  <title>More controls</title>

<section>
  <title>Introduction</title>

<para>
The second example will be slightly more complicated. First,
we will create a class derived from <classname>Wx::Frame</classname>,
second we will create some (well, just a button) controls inside
the frame. The button will do not do anything useful yet.
</para>

</section>

<section>
  <title>About subcontrols</title>

<para>
  Top level windows include frames and dialogs. While controls are
  usually placed directly inside a dialog, they should not be placed directly
  inside a frame. The reason is that, unlike a dialog, a frame does not
  provide support for control navigation. If you need to place controls
  on a frame, you should instead create them inside a panel and put
  this panel inside the frame.
</para>

</section>

<section>
  <title>Program</title>

<para>
  Subclassing a wxPerl window is as easy as with any other Perl class:
</para>

<!-- replace second #1 -->
<programlisting>
package MyFrame;
    
use base 'Wx::Frame';
</programlisting>
<!-- end -->

then of course you will want to create a specialized constructor for
your new subclass. The following snippet is exactly what you would
expect to work:

<!-- replace second #2 -->
<programlisting>
sub new {
    my $ref = shift;
    my $self = $ref->SUPER::new( undef,           # parent window
                                 -1,              # ID -1 means any
                                 'wxPerl rules',  # title
                                 [-1, -1],        # default position
                                 [150, 100],      # size
                                 );
</programlisting>
<!-- end -->

Next you need to create the controls to be put inside the frame. To do
so you can finally put to use the "parent" argument to
<methodname>new</methodname> that you left empty until now.

<!-- replace second #3 -->
<programlisting>
    # controls should not be placed directly inside
    # a frame, use a Wx::Panel instead
    my $panel = Wx::Panel->new( $self,            # parent window
                                -1,               # ID
                                );
    # create a button
    my $button = Wx::Button->new( $panel,         # parent window
                                  -1,             # ID
                                  'Click me!',    # label
                                  [30, 20],       # position
                                  [-1, -1],       # default size
                                  );
</programlisting>
<!-- end -->

The rest of this example is exactly like the preceding one except
that inside <methodname>OnInit</methodname> a
<classname>MyFrame</classname> instance is created instead of a
<classname>Wx::Frame</classname> one.

<!-- replace second #4 -->
<programlisting>
package MyApp;
    
use base 'Wx::App';
    
sub OnInit {
    my $frame = MyFrame->new;

  $frame->Show( 1 );
}
    
package main;
    
my $app = MyApp->new;
$app->MainLoop;
</programlisting>
<!-- end -->

<para>
  And finally here is how this looks on screen (well, not pretty,
  but I only had TWM installed...).
</para>

<mediaobject>
  <imageobject>
    <imagedata align="center" fileref="images/second.gtk2.png" format="PNG"/>
  </imageobject>
  <caption>
    <para>
(Linux/GTK 2)
    </para>
  </caption>
</mediaobject>

<para>
  <ulink url="second.pl.txt">Here</ulink> you can see the program at a glance
  (it is suffixed .pl.txt so your browser will not try to execute it, 
   but from Perl's point of view this makes no difference).
</para>

</section>

</chapter>

<chapter>
  <?dbhtml filename="tutorial4.html"?>
  <title>Events</title>

<section>
  <title>Introduction</title>

<para>
  In this example we will add simple event handling. In wxPerl this
  is done through the use of event connectors. This is just a
  bunch of functions (one for each event type) that define object
  methods to be called in response to certain events.
</para>

</section>

<section>
  <title>Program</title>

<para>
  The first thing to do in order to use events is importing the event
  connectors. All these functions are exported by the
  <classname>Wx::Event</classname> module.
</para>

<!-- replace third #1 -->
<programlisting>
package MyFrame;

use base 'Wx::Frame';
# import the event registration function
use Wx::Event qw(EVT_BUTTON);
</programlisting>
<!-- end -->

<para>
  The second step for using events is connecting an object method
  with an event; this way when some window fires an event the
  method will be called.
</para>

<!-- replace third #2 -->
<programlisting>
    my $button = Wx::Button->new( $panel,         # parent window
                                  -1,             # ID
                                  'Click me!',    # label
                                  [30, 20],       # position
                                  [-1, -1],       # default size
                                  );

    # register the OnClick method as an handler for the
    # 'button clicked' event. The first argument is a Wx::EvtHandler
    # that receives the event
    EVT_BUTTON( $self, $button, \&amp;OnClick );

    return $self;
}
</programlisting>
<!-- end -->

<para>
  The <function>EVT_BUTTON</function> call above means that,
  when a "button clicked" event is fired by
  <varname>$button</varname>, the method
  <methodname>$self->OnClick</methodname> is called.
</para>

<para>
  All event handlers always have two arguments: the first is the
  receiver for the event (the first parameter for the event
  connector), the second is an event object specific for the
  received event type. For button clicks (and various other
  events) it is a <classname>Wx::CommandEvent</classname>.
</para>

<!-- replace third #3 -->
<programlisting>
sub OnClick {
    my( $self, $event ) = @_;

    $self->SetTitle( 'Clicked' );
}
</programlisting>
<!-- end -->

<para>
  And finally here is how this looks on screen.
</para>

<mediaobject>
  <imageobject>
    <imagedata align="center" fileref="images/third.mac.png" format="PNG"/>
  </imageobject>
  <caption>
    <para>
(Mac OS X 10.3)
    </para>
  </caption>
</mediaobject>

<para>
  <ulink url="third.pl.txt">Here</ulink> you can see the program at a glance
  (it is suffixed .pl.txt so your browser will not try to execute it, 
   but from Perl's point of view this makes no difference).
</para>
        
</section>
    
<section>
  <title>About event connectors</title>

<para>
  All event connectors always take a <classname>Wx::EvtHandler</classname>
  as their first argument; most of the time this is just a
  <classname>Wx::Window</classname> subclass. This event is the
  object that will be passed as the first parameter to the event
  handler. Some events (like mouse motion events) can only be caught
  by the window generating them. Most kind of events however
  (like button click events) travel
  up the window hierarchy and can be caught by any ancestor of the
  control generating them. This means that wxPerl needs a way to
  distinguish which control generated a specific event. The answer
  lies in the second argument in the call to
  <function>EVT_BUTTON</function>, which is the button itself. 
</para>

<para>
  Every <classname>Wx::Window</classname> has an ID (the second
  argument to the constructor, always -1 in the examples so far)
  which identifies it inside the program. wxWidgets uses window
  IDs to distinguish the originators of events. This means that
  the program above could have passed a specific ID to
  <methodname>Wx::Button::new</methodname> and as the
  second argument to <function>EVT_BUTTON</function>. However
  keeping track of used IDs tends to be awkward and most of the time
  it is much simpler
  to let wxPerl sort things out (as in the example).
</para>

</section>

</chapter>

<chapter>
  <?dbhtml filename="tutorial5.html"?>
  <title>To be continued</title>

<para>
To be continued...
</para>

</chapter>

</book>
